{
	"info": {
		"_postman_id": "2566760d-3a9d-4c0d-992f-d2fbfaced29b",
		"name": "rest-ful-exp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15524686"
	},
	"item": [
		{
			"name": "customers",
			"item": [
				{
					"name": "Create new customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response status code",
									"pm.test(\"Response status code is 201 OK\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Optional: If you want to test the structure of the response body",
									"pm.test(\"Response body has the expected structure\", function () {",
									"    const responseBody = pm.response.json();",
									"",
									"    pm.expect(responseBody).to.have.property('id');",
									"    pm.expect(responseBody.id).to.be.a('number');",
									"",
									"    pm.expect(responseBody).to.have.property('name');",
									"    pm.expect(responseBody.name).to.be.a('string');",
									"",
									"    pm.expect(responseBody).to.have.property('lastName');",
									"    pm.expect(responseBody.lastName).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test3\",\n  \"lastName\": \"Test3\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read - Get customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response status code",
									"pm.test(\"Response status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response body",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"// Optional: If you want to test the structure of the response body",
									"pm.test(\"Response body has the expected structure for each item\", function () {",
									"    const responseBody = pm.response.json();",
									"",
									"    pm.expect(responseBody).to.be.an('array').that.is.not.empty;",
									"",
									"    responseBody.forEach((item) => {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item.id).to.be.a('number');",
									"",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item.name).to.be.a('string');",
									"",
									"        pm.expect(item).to.have.property('lastName');",
									"        pm.expect(item.lastName).to.be.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/customers",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read - Get customer by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test the response status code",
									"pm.test(\"Response status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response body",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"// Optional: If you want to test the structure of the response body",
									"pm.test(\"Response body has the expected structure\", function () {",
									"    const responseBody = pm.response.json();",
									"",
									"    pm.expect(responseBody).to.have.property('id');",
									"    pm.expect(responseBody.id).to.be.a('number');",
									"",
									"    pm.expect(responseBody).to.have.property('name');",
									"    pm.expect(responseBody.name).to.be.a('string');",
									"",
									"    pm.expect(responseBody).to.have.property('lastName');",
									"    pm.expect(responseBody.lastName).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/customers/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"customers",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - Replace customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.sendRequest({",
									"    url: \"http://localhost:8080/customers/1\", ",
									"    method: \"GET\"",
									"}, function (err, response) {",
									"    pm.test(\"Updated data is reflected in subsequent GET request\", function () {",
									"        const updatedData = {",
									"            \"name\": \"Bro\",",
									"            \"lastName\": \"Lok\"",
									"        };",
									"        pm.expect(response.json()).to.contains(updatedData);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Bro\",\n    \"lastName\": \"Lok\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/customers/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"customers",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update - Patch customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.sendRequest({",
									"    url: \"http://localhost:8080/customers/1\",",
									"    method: \"GET\"",
									"}, function (err, response) {",
									"    pm.test(\"Patched data is reflected in subsequent GET request\", function () {",
									"        const patchedData = {",
									"            \"name\": \"Ken\"",
									"        };",
									"        pm.expect(response.json()).to.contains(patchedData);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Ken\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/customers/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"customers",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Response body is empty for a successful deletion\", function () {",
									"    pm.expect(pm.response.text()).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/customers/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"customers",
								"2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}